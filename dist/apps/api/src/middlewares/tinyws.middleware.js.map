{
  "version": 3,
  "sources": ["../../../../../apps/api/src/middlewares/tinyws.middleware.ts"],
  "sourcesContent": ["import ws, { WebSocketServer as Server } from 'ws'\r\nimport http from 'http'\r\n\r\n/**\r\n * Copied from:\r\n * https://github.com/tinyhttp/tinyws/blob/master/src/index.ts\r\n */\r\n\r\nexport interface TinyWSRequest extends http.IncomingMessage {\r\n  ws: () => Promise<ws>\r\n}\r\n\r\n/**\r\n * tinyws - adds `req.ws` method that resolves when websocket request appears\r\n * @param wsOptions\r\n */\r\nexport const tinyws =\r\n  (wsOptions?: ws.ServerOptions, wss: Server = new Server({ ...wsOptions, noServer: true })) =>\r\n  async (req: TinyWSRequest, _: unknown, next: () => void | Promise<void>) => {\r\n    const upgradeHeader = (req.headers.upgrade || '').split(',').map((s) => s.trim())\r\n\r\n    // When upgrade header contains \"websocket\" it's index is 0\r\n    if (upgradeHeader.indexOf('websocket') === 0) {\r\n      req.ws = () =>\r\n        new Promise((resolve) => {\r\n          wss.handleUpgrade(req, req.socket, Buffer.alloc(0), (ws) => {\r\n            wss.emit('connection', ws, req)\r\n            resolve(ws)\r\n          })\r\n        })\r\n    }\r\n\r\n    await next()\r\n  }"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA8C;AAgBvC,MAAM,SACX,CAAC,WAA8B,MAAc,IAAI,UAAAA,gBAAO,EAAE,GAAG,WAAW,UAAU,KAAK,CAAC,MACxF,OAAO,KAAoB,GAAY,SAAqC;AAC1E,QAAM,iBAAiB,IAAI,QAAQ,WAAW,IAAI,MAAM,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC;AAGhF,MAAI,cAAc,QAAQ,WAAW,MAAM,GAAG;AAC5C,QAAI,KAAK,MACP,IAAI,QAAQ,CAAC,YAAY;AACvB,UAAI,cAAc,KAAK,IAAI,QAAQ,OAAO,MAAM,CAAC,GAAG,CAACC,QAAO;AAC1D,YAAI,KAAK,cAAcA,KAAI,GAAG;AAC9B,gBAAQA,GAAE;AAAA,MACZ,CAAC;AAAA,IACH,CAAC;AAAA,EACL;AAEA,QAAM,KAAK;AACb;",
  "names": ["Server", "ws"]
}
