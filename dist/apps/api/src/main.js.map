{
  "version": 3,
  "sources": ["../../../../apps/api/src/main.ts"],
  "sourcesContent": ["import express from 'express';\r\nimport cors from 'cors';\r\nimport { Request, Response } from 'express';\r\nimport ws from 'ws';\r\nimport config from './configs/app.config.js';\r\nimport indexRouter from './routes/index.route.js';\r\nimport healthCheckRouter from './routes/health-check.route.js';\r\nimport fourNobleTruthsRouter from './routes/four-noble-truths.route.js';\r\nimport eightfoldPathRouter from './routes/eightfold-path.route.js';\r\nimport zeroShotWisdomRouter from './routes/zero-shot-wisdom.route.js';\r\nimport ttsRouter from './routes/tts.route.js';\r\nimport experimentRouter from './routes/experiment.route.js';\r\nimport globalErrorHandler from './middlewares/global-error-handler.middleware.js';\r\nimport { tinyws } from './middlewares/tinyws.middleware.js';\r\nimport { loadPromptsIntoConfig } from './services/supabase.service.js';\r\n\r\n\r\ndeclare global {\r\n  // eslint-disable-next-line @typescript-eslint/no-namespace\r\n  namespace Express {\r\n    export interface Request {\r\n      ws: () => Promise<ws>;\r\n    }\r\n  }\r\n}\r\n\r\nconst app = express();\r\n\r\n\r\napp.set('trust proxy', 'loopback');\r\napp.use(\r\n  cors({\r\n    origin: config.app.allowedOrigins,\r\n    methods: ['GET', 'POST'],\r\n    preflightContinue: false,\r\n    optionsSuccessStatus: 204,\r\n    credentials: true,\r\n  })\r\n);\r\napp.use(express.json());\r\n\r\napp.get('/', indexRouter);\r\n\r\napp.use('/health-check', healthCheckRouter);\r\n\r\napp.use('/four-noble-truths', fourNobleTruthsRouter);\r\n\r\napp.use('/eightfold-path', eightfoldPathRouter);\r\n\r\napp.use('/zero-shot-wisdom', zeroShotWisdomRouter);\r\n\r\napp.use('/tts', ttsRouter);\r\n\r\napp.use('/experiment', experimentRouter);\r\n\r\napp.all('*', (req: Request, res: Response) => {\r\n  res.sendStatus(404);\r\n});\r\n\r\napp.use(globalErrorHandler);\r\n\r\nconst startServer = async () => {\r\n  try {\r\n    await loadPromptsIntoConfig();\r\n    \r\n    app.use(tinyws());\r\n    const port = config.app.port;\r\n    app.listen(port, () => {\r\n      console.log(`\u26A1\uFE0F [server]: Server is listening on ${port}`);\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nstartServer();\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA,qBAAoB;AACpB,kBAAiB;AAGjB,wBAAmB;AACnB,yBAAwB;AACxB,gCAA8B;AAC9B,qCAAkC;AAClC,kCAAgC;AAChC,oCAAiC;AACjC,uBAAsB;AACtB,8BAA6B;AAC7B,6CAA+B;AAC/B,+BAAuB;AACvB,8BAAsC;AAYtC,MAAM,UAAM,eAAAA,SAAQ;AAGpB,IAAI,IAAI,eAAe,UAAU;AACjC,IAAI;AAAA,MACF,YAAAC,SAAK;AAAA,IACH,QAAQ,kBAAAC,QAAO,IAAI;AAAA,IACnB,SAAS,CAAC,OAAO,MAAM;AAAA,IACvB,mBAAmB;AAAA,IACnB,sBAAsB;AAAA,IACtB,aAAa;AAAA,EACf,CAAC;AACH;AACA,IAAI,IAAI,eAAAF,QAAQ,KAAK,CAAC;AAEtB,IAAI,IAAI,KAAK,mBAAAG,OAAW;AAExB,IAAI,IAAI,iBAAiB,0BAAAC,OAAiB;AAE1C,IAAI,IAAI,sBAAsB,+BAAAC,OAAqB;AAEnD,IAAI,IAAI,mBAAmB,4BAAAC,OAAmB;AAE9C,IAAI,IAAI,qBAAqB,8BAAAC,OAAoB;AAEjD,IAAI,IAAI,QAAQ,iBAAAC,OAAS;AAEzB,IAAI,IAAI,eAAe,wBAAAC,OAAgB;AAEvC,IAAI,IAAI,KAAK,CAAC,KAAc,QAAkB;AAC5C,MAAI,WAAW,GAAG;AACpB,CAAC;AAED,IAAI,IAAI,uCAAAC,OAAkB;AAE1B,MAAM,cAAc,YAAY;AAC9B,MAAI;AACF,cAAM,+CAAsB;AAE5B,QAAI,QAAI,iCAAO,CAAC;AAChB,UAAM,OAAO,kBAAAR,QAAO,IAAI;AACxB,QAAI,OAAO,MAAM,MAAM;AACrB,cAAQ,IAAI,iDAAuC,IAAI,EAAE;AAAA,IAC3D,CAAC;AAAA,EACH,SAAS,OAAO;AACd,YAAQ,IAAI,KAAK;AAAA,EACnB;AACF;AAEA,YAAY;",
  "names": ["express", "cors", "config", "indexRouter", "healthCheckRouter", "fourNobleTruthsRouter", "eightfoldPathRouter", "zeroShotWisdomRouter", "ttsRouter", "experimentRouter", "globalErrorHandler"]
}
