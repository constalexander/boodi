{
  "version": 3,
  "sources": ["../../../../apps/api/src/main.ts"],
  "sourcesContent": ["import express from 'express';\nimport cors from 'cors';\nimport { Request, Response } from 'express';\nimport ws from 'ws';\nimport config from './configs/app.config.js';\nimport indexRouter from './routes/index.route.js';\nimport healthCheckRouter from './routes/health-check.route.js';\nimport fourNobleTruthsRouter from './routes/four-noble-truths.route.js';\nimport eightfoldPathRouter from './routes/eightfold-path.route.js';\nimport zeroShotWisdomRouter from './routes/zero-shot-wisdom.route.js';\nimport ttsRouter from './routes/tts.route.js';\nimport experimentRouter from './routes/experiment.route.js';\nimport globalErrorHandler from './middlewares/global-error-handler.middleware.js';\nimport { tinyws } from './middlewares/tinyws.middleware.js';\nimport { loadPromptsIntoConfig } from './services/supabase.service.js';\nimport zeroShotWisdomQuotesRouter from './routes/zero-shot-wisdom-quotes.route.js';\n\n\n\n\nconst app = express();\n\n\napp.set('trust proxy', 'loopback');\napp.use(\n  cors({\n    origin: config.app.allowedOrigins,\n    methods: ['GET', 'POST'],\n    preflightContinue: false,\n    optionsSuccessStatus: 204,\n    credentials: true,\n  })\n);\napp.use(express.json());\n\napp.get('/', indexRouter);\n\napp.use('/health-check', healthCheckRouter);\n\napp.use('/four-noble-truths', fourNobleTruthsRouter);\n\napp.use('/eightfold-path', eightfoldPathRouter);\n\napp.use('/zero-shot-wisdom', zeroShotWisdomRouter);\n\napp.use('/zero-shot-wisdom-quotes', zeroShotWisdomQuotesRouter);\n\napp.use('/tts', ttsRouter);\n\napp.use('/experiment', experimentRouter);\n\napp.all('*', (req: Request, res: Response) => {\n  res.sendStatus(404);\n});\n\napp.use(globalErrorHandler);\n\nconst startServer = async () => {\n  try {\n    await loadPromptsIntoConfig();\n    \n    app.use(tinyws());\n    const port = config.app.port;\n    app.listen(port, () => {\n      console.log(`\u26A1\uFE0F [server]: Server is listening on ${port}`);\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nstartServer();\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA,qBAAoB;AACpB,kBAAiB;AAGjB,wBAAmB;AACnB,yBAAwB;AACxB,gCAA8B;AAC9B,qCAAkC;AAClC,kCAAgC;AAChC,oCAAiC;AACjC,uBAAsB;AACtB,8BAA6B;AAC7B,6CAA+B;AAC/B,+BAAuB;AACvB,8BAAsC;AACtC,2CAAuC;AAKvC,MAAM,UAAM,eAAAA,SAAQ;AAGpB,IAAI,IAAI,eAAe,UAAU;AACjC,IAAI;AAAA,MACF,YAAAC,SAAK;AAAA,IACH,QAAQ,kBAAAC,QAAO,IAAI;AAAA,IACnB,SAAS,CAAC,OAAO,MAAM;AAAA,IACvB,mBAAmB;AAAA,IACnB,sBAAsB;AAAA,IACtB,aAAa;AAAA,EACf,CAAC;AACH;AACA,IAAI,IAAI,eAAAF,QAAQ,KAAK,CAAC;AAEtB,IAAI,IAAI,KAAK,mBAAAG,OAAW;AAExB,IAAI,IAAI,iBAAiB,0BAAAC,OAAiB;AAE1C,IAAI,IAAI,sBAAsB,+BAAAC,OAAqB;AAEnD,IAAI,IAAI,mBAAmB,4BAAAC,OAAmB;AAE9C,IAAI,IAAI,qBAAqB,8BAAAC,OAAoB;AAEjD,IAAI,IAAI,4BAA4B,qCAAAC,OAA0B;AAE9D,IAAI,IAAI,QAAQ,iBAAAC,OAAS;AAEzB,IAAI,IAAI,eAAe,wBAAAC,OAAgB;AAEvC,IAAI,IAAI,KAAK,CAAC,KAAc,QAAkB;AAC5C,MAAI,WAAW,GAAG;AACpB,CAAC;AAED,IAAI,IAAI,uCAAAC,OAAkB;AAE1B,MAAM,cAAc,YAAY;AAC9B,MAAI;AACF,cAAM,+CAAsB;AAE5B,QAAI,QAAI,iCAAO,CAAC;AAChB,UAAM,OAAO,kBAAAT,QAAO,IAAI;AACxB,QAAI,OAAO,MAAM,MAAM;AACrB,cAAQ,IAAI,iDAAuC,IAAI,EAAE;AAAA,IAC3D,CAAC;AAAA,EACH,SAAS,OAAO;AACd,YAAQ,IAAI,KAAK;AAAA,EACnB;AACF;AAEA,YAAY;",
  "names": ["express", "cors", "config", "indexRouter", "healthCheckRouter", "fourNobleTruthsRouter", "eightfoldPathRouter", "zeroShotWisdomRouter", "zeroShotWisdomQuotesRouter", "ttsRouter", "experimentRouter", "globalErrorHandler"]
}
