{
  "version": 3,
  "sources": ["../../../../../apps/api/src/controllers/eightfold-path.controller.ts"],
  "sourcesContent": ["import { NextFunction, Request, Response } from \"express\";\nimport {\n  ChatCompletionChunk,\n  ChatCompletionCreateParamsNonStreaming,\n  ChatCompletionCreateParamsStreaming,\n} from \"openai/resources/index.mjs\";\nimport config from \"../configs/app.config.js\";\nimport {\n  ai,\n  defaultParamsStreaming,\n  getStreamingCompletion,\n} from \"../services/openai.service.js\";\nimport { saveInteraction } from \"../services/supabase.service.js\";\nimport { Stream } from \"openai/streaming.mjs\";\n\n// export const askFirstOnly = async (\n//   req: Request,\n//   res: Response,\n//   next: NextFunction\n// ) => {\n//   const params: ChatCompletionCreateParamsNonStreaming = {\n//     messages: [\n//       {\n//         role: \"system\",\n//         content: `${config.prompts.boodi}${config.prompts.eightfoldPathFirstOnly}`,\n//       },\n//       {\n//         role: \"user\",\n//         content: `${req.body.suffering}`,\n//       },\n//     ],\n//     model: config.openai.model,\n//     temperature: 0.25,\n//     max_tokens: 128,\n//     n: 1,\n//     stop: null,\n//   };\n//   const completion = await ai.chat.completions.create(params);\n\n//   res.json({\n//     result: completion.choices[0].message.content ?? \"Please try again\",\n//   });\n// };\n\n// export const askFull = async (\n//   req: Request,\n//   res: Response,\n//   next: NextFunction\n// ) => {\n//   const params: ChatCompletionCreateParamsNonStreaming = {\n//     messages: [\n//       {\n//         role: \"system\",\n//         content: `${config.prompts.boodi}${config.prompts.eightfoldPathFull}`,\n//       },\n//       {\n//         role: \"user\",\n//         content: `${req.body.suffering}`,\n//       },\n//     ],\n//     model: config.openai.model,\n//     temperature: 0.25,\n//     max_tokens: 1024,\n//     n: 1,\n//     stop: null,\n//   };\n\n//   const completion = await ai.chat.completions.create(params);\n\n//   res.json({\n//     result: completion.choices[0].message.content ?? \"Please try again\",\n//   });\n// };\n\n// export const askFullStreaming = async (\n//   req: Request,\n//   res: Response,\n//   next: NextFunction\n// ) => {\n//   res.setHeader(\"Content-Type\", \"text/event-stream\");\n//   res.setHeader(\"Cache-Control\", \"no-cache\");\n//   res.setHeader(\"Connection\", \"keep-alive\");\n\n//   const params: ChatCompletionCreateParamsStreaming = {\n//     ...defaultParamsStreaming,\n//   };\n\n//   const stream = await getStreamingCompletion(params);\n\n//   for await (const chunk of stream) {\n//     const text = chunk.choices[0]?.delta.content || \"\";\n//     res.write(text);\n//   }\n\n//   res.end();\n// };\n\nexport const askFull = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  if (!req.ws) return;\n  const ws = await req.ws();\n\n  ws.on(\"error\", console.error);\n\n  ws.on(\"message\", (msg: string) => {\n    const msgObj = JSON.parse(msg);\n\n    const startStream = async (message: string) => {\n      const params = {\n        messages: [\n          {\n            role: \"system\",\n            content: config.prompts.eightfoldPathFull,\n          },\n          {\n            role: \"user\",\n            content: message,\n          },\n        ],\n        max_tokens: 512,\n      };\n\n      const stream: Stream<ChatCompletionChunk> = await getStreamingCompletion(\n        params\n      );\n\n      let output = \"\";\n      for await (const chunk of stream) {\n        const token = chunk.choices[0]?.delta.content || \"\";\n        output += token;\n\n        ws.send(token);\n      }\n\n      ws.close();\n\n      await saveInteraction(\n        \"/eightfold-path/full\",\n        message,\n        output,\n        msgObj.userUUID\n      );\n    };\n\n    startStream(msgObj.suffering);\n  });\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,wBAAmB;AACnB,4BAIO;AACP,8BAAgC;AAqFzB,MAAM,UAAU,OACrB,KACA,KACA,SACG;AACH,MAAI,CAAC,IAAI;AAAI;AACb,QAAM,KAAK,MAAM,IAAI,GAAG;AAExB,KAAG,GAAG,SAAS,QAAQ,KAAK;AAE5B,KAAG,GAAG,WAAW,CAAC,QAAgB;AAChC,UAAM,SAAS,KAAK,MAAM,GAAG;AAE7B,UAAM,cAAc,OAAO,YAAoB;AAC7C,YAAM,SAAS;AAAA,QACb,UAAU;AAAA,UACR;AAAA,YACE,MAAM;AAAA,YACN,SAAS,kBAAAA,QAAO,QAAQ;AAAA,UAC1B;AAAA,UACA;AAAA,YACE,MAAM;AAAA,YACN,SAAS;AAAA,UACX;AAAA,QACF;AAAA,QACA,YAAY;AAAA,MACd;AAEA,YAAM,SAAsC,UAAM;AAAA,QAChD;AAAA,MACF;AAEA,UAAI,SAAS;AACb,uBAAiB,SAAS,QAAQ;AAChC,cAAM,QAAQ,MAAM,QAAQ,CAAC,GAAG,MAAM,WAAW;AACjD,kBAAU;AAEV,WAAG,KAAK,KAAK;AAAA,MACf;AAEA,SAAG,MAAM;AAET,gBAAM;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA,OAAO;AAAA,MACT;AAAA,IACF;AAEA,gBAAY,OAAO,SAAS;AAAA,EAC9B,CAAC;AACH;",
  "names": ["config"]
}
