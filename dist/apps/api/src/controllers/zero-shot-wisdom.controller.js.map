{
  "version": 3,
  "sources": ["../../../../../apps/api/src/controllers/zero-shot-wisdom.controller.ts"],
  "sourcesContent": ["import { Request } from 'express';\r\nimport { Stream } from 'openai/streaming.mjs';\r\nimport { ChatCompletionChunk } from 'openai/resources/index.mjs';\r\nimport config from '../configs/app.config.js';\r\nimport { saveInteraction } from '../services/supabase.service.js';\r\nimport { getStreamingCompletion } from '../services/openai.service.js';\r\nimport { countTokens } from '../utils/utils.js';\r\n\r\nexport const ask = async (req: Request) => {\r\n  if (!req.ws) return;\r\n  const ws = await req.ws();\r\n\r\n  ws.on('error', console.error);\r\n\r\n  ws.on('message', (msg: string) => {\r\n    const msgObj = JSON.parse(msg);\r\n\r\n    const startStream = async (input: string) => {\r\n      const params = {\r\n        messages: [\r\n          {\r\n            role: 'system',\r\n            content: config.prompts.zeroShotWisdom,\r\n          },\r\n          {\r\n            role: 'user',\r\n            content: input,\r\n          },\r\n        ],\r\n        max_tokens: config.prompts.max_tokens_1,\r\n      };\r\n\r\n      const stream: Stream<ChatCompletionChunk> = await getStreamingCompletion(\r\n        params\r\n      );\r\n\r\n      let totalTokens = countTokens(input);\r\n      let output = '';\r\n      for await (const chunk of stream) {\r\n        const token = chunk.choices[0]?.delta.content || '';\r\n        totalTokens++;\r\n        output += token;\r\n\r\n        ws.send(token);\r\n      }\r\n\r\n      ws.close();\r\n      if (config.app.env !== 'dev') {\r\n        await saveInteraction(\r\n          '/zero-shot-wisdom',\r\n          input,\r\n          output,\r\n          totalTokens,\r\n          msgObj.userUUID\r\n        );\r\n      }\r\n    };\r\n\r\n    startStream(msgObj.inputText);\r\n  });\r\n};\r\n\r\nexport const quote = async (req: Request) => {\r\n  if (!req.ws) return;\r\n  const ws = await req.ws();\r\n\r\n  ws.on('error', console.error);\r\n\r\n  ws.on('message', (msg: string) => {\r\n    const msgObj = JSON.parse(msg);\r\n\r\n    const startStream = async (input: string) => {\r\n      const params = {\r\n        messages: [\r\n          {\r\n            role: 'system',\r\n            content: `${config.prompts.zeroShotWisdom} ${config.prompts.quote}`,\r\n          },\r\n          {\r\n            role: 'user',\r\n            content: input,\r\n          },\r\n        ],\r\n        max_tokens: config.prompts.max_tokens_1,\r\n      };\r\n\r\n      const stream: Stream<ChatCompletionChunk> = await getStreamingCompletion(\r\n        params\r\n      );\r\n\r\n      let totalTokens = countTokens(input);\r\n      let output = '';\r\n      for await (const chunk of stream) {\r\n        const token = chunk.choices[0]?.delta.content || '';\r\n        totalTokens++;\r\n        output += token;\r\n\r\n        ws.send(token);\r\n      }\r\n\r\n      ws.close();\r\n\r\n      if (config.app.env !== 'dev') {\r\n        await saveInteraction(\r\n          '/zero-shot-wisdom',\r\n          input,\r\n          output,\r\n          totalTokens,\r\n          msgObj.userUUID\r\n        );\r\n      }\r\n    };\r\n\r\n    startStream(msgObj.inputText);\r\n  });\r\n};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,wBAAmB;AACnB,8BAAgC;AAChC,4BAAuC;AACvC,mBAA4B;AAErB,MAAM,MAAM,OAAO,QAAiB;AACzC,MAAI,CAAC,IAAI;AAAI;AACb,QAAM,KAAK,MAAM,IAAI,GAAG;AAExB,KAAG,GAAG,SAAS,QAAQ,KAAK;AAE5B,KAAG,GAAG,WAAW,CAAC,QAAgB;AAChC,UAAM,SAAS,KAAK,MAAM,GAAG;AAE7B,UAAM,cAAc,OAAO,UAAkB;AAC3C,YAAM,SAAS;AAAA,QACb,UAAU;AAAA,UACR;AAAA,YACE,MAAM;AAAA,YACN,SAAS,kBAAAA,QAAO,QAAQ;AAAA,UAC1B;AAAA,UACA;AAAA,YACE,MAAM;AAAA,YACN,SAAS;AAAA,UACX;AAAA,QACF;AAAA,QACA,YAAY,kBAAAA,QAAO,QAAQ;AAAA,MAC7B;AAEA,YAAM,SAAsC,UAAM;AAAA,QAChD;AAAA,MACF;AAEA,UAAI,kBAAc,0BAAY,KAAK;AACnC,UAAI,SAAS;AACb,uBAAiB,SAAS,QAAQ;AAChC,cAAM,QAAQ,MAAM,QAAQ,CAAC,GAAG,MAAM,WAAW;AACjD;AACA,kBAAU;AAEV,WAAG,KAAK,KAAK;AAAA,MACf;AAEA,SAAG,MAAM;AACT,UAAI,kBAAAA,QAAO,IAAI,QAAQ,OAAO;AAC5B,kBAAM;AAAA,UACJ;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA,OAAO;AAAA,QACT;AAAA,MACF;AAAA,IACF;AAEA,gBAAY,OAAO,SAAS;AAAA,EAC9B,CAAC;AACH;AAEO,MAAM,QAAQ,OAAO,QAAiB;AAC3C,MAAI,CAAC,IAAI;AAAI;AACb,QAAM,KAAK,MAAM,IAAI,GAAG;AAExB,KAAG,GAAG,SAAS,QAAQ,KAAK;AAE5B,KAAG,GAAG,WAAW,CAAC,QAAgB;AAChC,UAAM,SAAS,KAAK,MAAM,GAAG;AAE7B,UAAM,cAAc,OAAO,UAAkB;AAC3C,YAAM,SAAS;AAAA,QACb,UAAU;AAAA,UACR;AAAA,YACE,MAAM;AAAA,YACN,SAAS,GAAG,kBAAAA,QAAO,QAAQ,cAAc,IAAI,kBAAAA,QAAO,QAAQ,KAAK;AAAA,UACnE;AAAA,UACA;AAAA,YACE,MAAM;AAAA,YACN,SAAS;AAAA,UACX;AAAA,QACF;AAAA,QACA,YAAY,kBAAAA,QAAO,QAAQ;AAAA,MAC7B;AAEA,YAAM,SAAsC,UAAM;AAAA,QAChD;AAAA,MACF;AAEA,UAAI,kBAAc,0BAAY,KAAK;AACnC,UAAI,SAAS;AACb,uBAAiB,SAAS,QAAQ;AAChC,cAAM,QAAQ,MAAM,QAAQ,CAAC,GAAG,MAAM,WAAW;AACjD;AACA,kBAAU;AAEV,WAAG,KAAK,KAAK;AAAA,MACf;AAEA,SAAG,MAAM;AAET,UAAI,kBAAAA,QAAO,IAAI,QAAQ,OAAO;AAC5B,kBAAM;AAAA,UACJ;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA,OAAO;AAAA,QACT;AAAA,MACF;AAAA,IACF;AAEA,gBAAY,OAAO,SAAS;AAAA,EAC9B,CAAC;AACH;",
  "names": ["config"]
}
